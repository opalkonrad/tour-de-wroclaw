import pytest

from src.graph.utils import haversine, convert_epsg, convert_coords_list


@pytest.mark.parametrize(
    "coords1, coords2, expected_distance",
    [
        ((17.05105179721908, 51.10552573556749), (17.051100797245194, 51.105524399131106), 0.0034243079425882437),
        ((17.04652980772954, 51.108920996994755), (17.046540597303316, 51.10882741331448), 0.010433257293806257),
        ((17.046542407898517, 51.10873942261532), (17.046489099876215, 51.1086676322474), 0.0088076223337752),
        ((17.046338940550687, 51.10857255975646), (17.04657166816933, 51.111696234499604), 0.34771655808741186),
        ((17.046466989512595, 51.11175831409584), (17.046350022036584, 51.11178574421606), 0.0087163991653925),
        ((17.0457573425917, 51.111869548102625), (17.045402694974314, 51.11191660270338), 0.025304213893768288),
    ]    
)
def test_haversine(coords1, coords2, expected_distance):
    distance = haversine(*coords1, *coords2)

    assert distance == expected_distance


@pytest.mark.parametrize(
    "in_coords, expected_coords",
    [
        ((6433543.0145, 5663817.6194), (17.05105179721908, 51.10552573556749)),
        ((6433546.4441, 5663817.4265), (17.051100797245194, 51.105524399131106)),
        ((6433231.2278, 5664199.395500001), (17.04652980772954, 51.108920996994755)),
        ((6433231.8485, 5664188.9756000005), (17.046540597303316, 51.10882741331448)),
        ((6433231.8485, 5664179.186000001), (17.046542407898517, 51.10873942261532)),
        ((6433228.0121, 5664171.248500001), (17.046489099876215, 51.1086676322474)),
        ((6433217.36, 5664160.809), (17.046338940550687, 51.10857255975646)),
        ((6433238.158, 5664508.071), (17.04657166816933, 51.111696234499604)),
        ((6433230.9177, 5664515.071599999), (17.046466989512595, 51.11175831409584)),
        ((6433222.767, 5664518.229), (17.046350022036584, 51.11178574421606)),
        ((6433181.3876, 5664528.0890999995), (17.0457573425917, 51.111869548102625)),
        ((6433156.6226, 5664533.645400001), (17.045402694974314, 51.11191660270338)),
    ]
)
def test_convert_epsg(in_coords, expected_coords):
    outcoords = convert_epsg(*in_coords)

    assert outcoords == expected_coords


@pytest.mark.parametrize(
    "in_list, expected_list",
    [
        (
            [(6433543.0145, 5663817.6194), (6433546.4441, 5663817.4265), (6433231.2278, 5664199.395500001)],
            [(17.05105179721908, 51.10552573556749), (17.051100797245194, 51.105524399131106), (17.04652980772954, 51.108920996994755)],
        ),
        (
            [(6433181.3876, 5664528.0890999995), (6433156.6226, 5664533.645400001)],
            [(17.0457573425917, 51.111869548102625), (17.045402694974314, 51.11191660270338)],
        )
    ]
)
def test_convert_list(in_list, expected_list):
    coords_list = convert_coords_list(in_list)

    assert coords_list == expected_list
